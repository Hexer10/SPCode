<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ValveQuery</name>
    </assembly>
    <members>
        <member name="T:ValveQuery.DataObject">
            <summary>
            Base of all data objects in this library.
            </summary>
        </member>
        <member name="M:ValveQuery.DataObject.ToString">
            <summary>
            Returns Json string.
            </summary>
            <returns>Json string.</returns>
        </member>
        <member name="T:ValveQuery.Region">
            <summary>
            Region codes
            </summary>
        </member>
        <member name="F:ValveQuery.Region.US_East">
            <summary>
            US East coast 
            </summary>
        </member>
        <member name="F:ValveQuery.Region.US_West">
            <summary>
            US West coast 
            </summary>
        </member>
        <member name="F:ValveQuery.Region.South_America">
            <summary>
            South America
            </summary>
        </member>
        <member name="F:ValveQuery.Region.Europe">
            <summary>
            Europe
            </summary>
        </member>
        <member name="F:ValveQuery.Region.Asia">
            <summary>
            Asia
            </summary>
        </member>
        <member name="F:ValveQuery.Region.Australia">
            <summary>
            Australia
            </summary>
        </member>
        <member name="F:ValveQuery.Region.Middle_East">
            <summary>
            Middle East 
            </summary>
        </member>
        <member name="F:ValveQuery.Region.Africa">
            <summary>
            Africa
            </summary>
        </member>
        <member name="F:ValveQuery.Region.World">
            <summary>
            Rest of the world 
            </summary>
        </member>
        <member name="T:ValveQuery.GameServerException">
            <summary>
            Base for all GameServer Exception.
            </summary>
        </member>
        <member name="T:ValveQuery.InvalidHeaderException">
            <summary>
            The exception that is thrown when an invalid message header is received.
            </summary>
        </member>
        <member name="T:ValveQuery.InvalidPacketException">
            <summary>
            The exception that is thrown when an invalid packet is received.
            </summary>
        </member>
        <member name="T:ValveQuery.ParseException">
            <summary>
            The exception that is thrown when there is an error while parsing received packets.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.ExtraInfo">
            <summary>
            Contains extra information about server.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ExtraInfo.Port">
            <summary>
            The server's game port number.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ExtraInfo.SteamId">
            <summary>
            Server's SteamID. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ExtraInfo.SpecInfo">
            <summary>
            Contains information on Source TV.(if it is Source TV).
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ExtraInfo.Keywords">
            <summary>
            Tags that describe the game according to the server. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ExtraInfo.GameId">
            <summary>
            The server's 64-bit GameID.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.LogFilter">
            <summary>
            Represents log filter.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogFilter.RegexInstance">
            <summary>
            Regex instance.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogFilter.FilterString">
            <summary>
            used to store the regex pattern.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogFilter.Enabled">
            <summary>
            Gets or sets a value indicating whether the filter is enabled.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogFilter.Action">
            <summary>
            Gets or sets <see cref="T:ValveQuery.GameServer.LogFilterAction" />
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.LogFilterCollection">
            <summary>
            Represents collection of logfilter.
            </summary>
        </member>
        <member name="F:ValveQuery.GameServer.LogFilterCollection.LockObj">
            <summary>
            used to set lock on add/remove of filter.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.LogFilterCollection.EnableAll">
            <summary>
            Enables all filters.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.LogFilterCollection.EnableAll(System.Type)">
            <summary>
            Enables filter of specific type.
            </summary>
            <param name="type">Filter type.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogFilterCollection.DisableAll">
            <summary>
            Disables all filters.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.LogFilterCollection.DisableAll(System.Type)">
            <summary>
            Disables filter of specific type.
            </summary>
            <param name="type">Filter type.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogFilterCollection.Add(ValveQuery.GameServer.LogFilter)">
            <summary>
            Adds a filter to the end of the collection.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:ValveQuery.GameServer.LogFilterCollection.Remove(ValveQuery.GameServer.LogFilter)">
            <summary>
            Removes specified filter from the collection.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:ValveQuery.GameServer.LogFilterCollection.Clear">
            <summary>
            Removes all filters from the collection.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.LogFilterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Filter collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ValveQuery.GameServer.LogPlayerInfo">
            <summary>
            Contains information of a player.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogPlayerInfo.Name">
            <summary>
            Name of player.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogPlayerInfo.Uid">
            <summary>
            UId of player(Steam ID).
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogPlayerInfo.WonId">
            <summary>
            Won Id.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogPlayerInfo.Team">
            <summary>
            Player's Team Name.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.ModInfo">
            <summary>
            Contains information about the Mod.
            </summary>
            <remarks>Present only in Obsolete server responses.</remarks>
        </member>
        <member name="P:ValveQuery.GameServer.ModInfo.Link">
            <summary>
            URL to mod website. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ModInfo.DownloadLink">
            <summary>
            URL to download the mod. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ModInfo.Version">
            <summary>
            Version of mod installed on server. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ModInfo.Size">
            <summary>
            Space (in bytes) the mod takes up. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ModInfo.IsOnlyMultiPlayer">
            <summary>
            Indicates the type of mod.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ModInfo.IsHalfLifeDll">
            <summary>
            Indicates whether mod uses its own DLL.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.PlayerFilter">
            <summary>
            Represents a filter that filters by player.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerFilter.Name">
            <summary>
            Name of the player.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerFilter.UserId">
            <summary>
            User id of the player.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerFilter.SteamId">
            <summary>
            SteamId of the player.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerFilter.Team">
            <summary>
            Team in which the player is in.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.PlayerFilter.ToString">
            <summary>
            Creates a regex filter pattern based on name,userid,steamid and team. 
            </summary>
            <returns>Regex filter pattern.</returns>
        </member>
        <member name="T:ValveQuery.GameServer.PlayerInfo">
            <summary>
            Contains information of a player currently in server.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerInfo.Name">
            <summary>
            Name of the player. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerInfo.Score">
            <summary>
            Player's score (usually "frags" or "kills".).
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerInfo.Time">
            <summary>
            Time  player has been connected to the server.(returns TimeSpan instance).
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.RegexFilter">
            <summary>
            Represents a filter that filters by provided regex filter pattern.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.RegexFilter.RegexPattern">
            <summary>
            Regex pattern.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.RegexFilter.ToString">
            <summary>
            Regex filter pattern.
            </summary>
            <returns>Regex filter pattern.</returns>
        </member>
        <member name="T:ValveQuery.GameServer.Rule">
            <summary>
            Contains information of a server rule.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.Rule.Name">
            <summary>
            Name of the rule. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.Rule.Value">
            <summary>
            Value of the rule. 
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.ServerInfo">
            <summary>
            Contains information about the server.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.IsObsolete">
            <summary>
            Returns true if server replies with Obsolete response format.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.Address">
            <summary>
            Socket address of server.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.Protocol">
            <summary>
            Protocol version used by the server. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.Name">
            <summary>
            Name of the server. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.Map">
            <summary>
            Map the server has currently loaded. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.Directory">
            <summary>
            Name of the folder containing the game files. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.Description">
            <summary>
            Full name of the game. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.Id">
            <summary>
            Steam Application ID of game. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.Players">
            <summary>
            Number of players on the server. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.MaxPlayers">
            <summary>
            Maximum number of players the server reports it can hold. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.Bots">
            <summary>
            Number of bots on the server. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.ServerType">
            <summary>
            Indicates the type of server.(Dedicated/Non-dedicated/Proxy)
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.Environment">
            <summary>
            Indicates the operating system of the server.(Linux/Windows/Mac)
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.IsPrivate">
            <summary>
            Indicates whether the server requires a password.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.IsSecure">
            <summary>
            Specifies whether the server uses VAC.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.GameVersion">
            <summary>
            Version of the game installed on the server. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.Ping">
            <summary>
            Round-trip delay time.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.ExtraInfo">
            <summary>
            Additional information provided by server.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.IsModded">
            <summary>
            Indicates whether the game is a mod(Halflife/HalfLifeMod).
            </summary>
            <remarks>Present only  in Obsolete server responses.</remarks>
        </member>
        <member name="P:ValveQuery.GameServer.ServerInfo.ModInfo">
            <summary>
            Valid only if the game is a mod(i.e. if IsModded = true).
            </summary>
            <remarks>Present only in Obsolete server responses.</remarks>
        </member>
        <member name="T:ValveQuery.GameServer.SourceTVInfo">
            <summary>
            Contains information on SourceTV.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.SourceTVInfo.Port">
            <summary>
            Spectator port number for SourceTV.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.SourceTVInfo.Name">
            <summary>
            Name of the spectator server for SourceTV.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.StringFilter">
            <summary>
            Represents a filter that filters by provided string.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.StringFilter.String">
            <summary>
            Filter string.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.StringFilter.ToString">
            <summary>
            Creates a regex filter pattern based on the filter string.
            </summary>
            <returns>Regex filter pattern.</returns>
        </member>
        <member name="T:ValveQuery.GameServer.LogFilterAction">
            <summary>
            Specifies the type of action filter should perform.
            </summary>
        </member>
        <member name="F:ValveQuery.GameServer.LogFilterAction.Allow">
            <summary>
            Allow.
            </summary>
        </member>
        <member name="F:ValveQuery.GameServer.LogFilterAction.Block">
            <summary>
            Block.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.GameServerType">
            <summary>
            Game Server's type.
            </summary>
        </member>
        <member name="F:ValveQuery.GameServer.GameServerType.Invalid">
            <summary>
            Server returned an invalid value.
            </summary>
        </member>
        <member name="F:ValveQuery.GameServer.GameServerType.Dedicated">
            <summary>
            Dedicated.
            </summary>
        </member>
        <member name="F:ValveQuery.GameServer.GameServerType.NonDedicated">
            <summary>
            Non Dedicated.
            </summary>
        </member>
        <member name="F:ValveQuery.GameServer.GameServerType.Listen">
            <summary>
            Listen.
            </summary>
        </member>
        <member name="F:ValveQuery.GameServer.GameServerType.SourceTV">
            <summary>
            Source TV.
            </summary>
        </member>
        <member name="F:ValveQuery.GameServer.GameServerType.HLTVServer">
            <summary>
            HLTV Server
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.GameEnvironment">
            <summary>
            Server's operating system.
            </summary>
        </member>
        <member name="F:ValveQuery.GameServer.GameEnvironment.Invalid">
            <summary>
            Server returned an invalid value.
            </summary>
        </member>
        <member name="F:ValveQuery.GameServer.GameEnvironment.Linux">
            <summary>
            Linux.
            </summary>
        </member>
        <member name="F:ValveQuery.GameServer.GameEnvironment.Windows">
            <summary>
            Windows.
            </summary>
        </member>
        <member name="F:ValveQuery.GameServer.GameEnvironment.Mac">
            <summary>
            Mac.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.ChatEventArgs">
            <summary>
            Provides data for Say and TeamSay events.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ChatEventArgs.Message">
            <summary>
            Gets the message said by player.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.CommentReceivedEventArgs">
            <summary>
            Provides data for Comment Received event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.CommentReceivedEventArgs.Comment">
            <summary>
            Comment.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.ConnectEventArgs">
            <summary>
            Provides data for player connect event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ConnectEventArgs.Ip">
            <summary>
            Gets IP-Address of client.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ConnectEventArgs.Port">
            <summary>
            Gets Port number of client.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.CvarEventArgs">
            <summary>
            Provides data for Server cvar event. 
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.CvarEventArgs.Cvar">
            <summary>
            Gets Cvar name.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.CvarEventArgs.Value">
            <summary>
            Gets Cvar Value.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.ExceptionEventArgs">
            <summary>
            Provides data for Exception event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ExceptionEventArgs.Message">
            <summary>
            Gets received log message.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.InjureEventArgs">
            <summary>
            Provides data for player injured event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.InjureEventArgs.Damage">
            <summary>
            Gets damage.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.KickEventArgs">
            <summary>
            Provides data for playerkicked event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.KickEventArgs.Kicker">
            <summary>
            Gets the name of the admin who kicked the player.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.KickEventArgs.Message">
            <summary>
            Gets the message sent as a reason for the kick.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.KillEventArgs">
            <summary>
            Provides data for player killed event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.KillEventArgs.Victim">
            <summary>
            Gets Victim player's info.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.KillEventArgs.Weapon">
            <summary>
            Gets the name of the weapon used.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.LogEventArgs">
            <summary>
            Serves as base class for all log  EventArgs.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogEventArgs.Timestamp">
            <summary>
            Gets Timestamp.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.LogReceivedEventArgs">
            <summary>
            Provides data for log received event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogReceivedEventArgs.Message">
            <summary>
            Gets received log message.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.LogStartEventArgs">
            <summary>
            Provides data for log start event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogStartEventArgs.FileName">
            <summary>
            Gets Filename.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogStartEventArgs.Game">
            <summary>
            Gets Game name.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogStartEventArgs.Protocol">
            <summary>
            Gets Protocol version.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogStartEventArgs.Release">
            <summary>
            Gets Release version.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogStartEventArgs.Build">
            <summary>
            Gets Build version.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.MapLoadEventArgs">
            <summary>
            Provides data for map loaded event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.MapLoadEventArgs.MapName">
            <summary>
            Gets Map name.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.MapStartEventArgs">
            <summary>
            Provides data for map started event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.MapStartEventArgs.MapCRC">
            <summary>
            Get map CRC value.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.NameChangeEventArgs">
            <summary>
            Provides data for player name change event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.NameChangeEventArgs.NewName">
            <summary>
            Gets player's new name.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.PlayerActionEventArgs">
            <summary>
            Provides data for Player action event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerActionEventArgs.Action">
            <summary>
            Gets the name of the action performed.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerActionEventArgs.ExtraInfo">
            <summary>
            Gets additional data present in the message.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.PlayerEventArgs">
            <summary>
            Provides data for Playervalidate,playerenteredgame and player disconnected event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerEventArgs.Player">
            <summary>
            Gets Player information.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.PlayerOnPlayerEventArgs">
            <summary>
            Provides data for PlayerOnPLayerTriggered event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerOnPlayerEventArgs.Source">
            <summary>
            Gets info about the player who triggered an action.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerOnPlayerEventArgs.Target">
            <summary>
            Gets info about the player on whom the ation was triggered.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerOnPlayerEventArgs.Action">
            <summary>
            Gets the name of the  action performed.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.PlayerScoreReportEventArgs">
            <summary>
            Provides data for PlayerScoreReport event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerScoreReportEventArgs.Score">
            <summary>
            Gets player score.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PlayerScoreReportEventArgs.ExtraInfo">
            <summary>
            Gets the additional data present in the message.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.PrivateChatEventArgs">
            <summary>
            Provides data for PrivateChat event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PrivateChatEventArgs.Sender">
            <summary>
            Gets Sender Player's info.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PrivateChatEventArgs.Receiver">
            <summary>
            Gets Receiver Player's info.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.PrivateChatEventArgs.Message">
            <summary>
            Get the message sent by sender.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.RconEventArgs">
            <summary>
            Provides data for rcon event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.RconEventArgs.Challenge">
            <summary>
            Gets Challenge Id of remote client.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.RconEventArgs.Password">
            <summary>
            Gets Password.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.RconEventArgs.Command">
            <summary>
            Gets command sent by remote client.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.RconEventArgs.Ip">
            <summary>
            Gets IP-Address of client.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.RconEventArgs.Port">
            <summary>
            Gets Port number of client.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.RconEventArgs.IsValid">
            <summary>
            Returns true if password sent is valid.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.RoleSelectionEventArgs">
            <summary>
            Provides data for role selection event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.RoleSelectionEventArgs.Role">
            <summary>
            Gets the role name.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.ServerNameEventArgs">
            <summary>
            Provides data for servername event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerNameEventArgs.Name">
            <summary>
            Gets name of server.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.ServerSayEventArgs">
            <summary>
            Provides data for server say event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.ServerSayEventArgs.Message">
            <summary>
            Gets the message said by server.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.SuicideEventArgs">
            <summary>
            Provides data for suicide event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.SuicideEventArgs.Weapon">
            <summary>
            Gets the weapon name.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.TeamActionEventArgs">
            <summary>
            Provides data for team action event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.TeamActionEventArgs.Team">
            <summary>
            Gets the name of the team who triggered an action.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.TeamActionEventArgs.Action">
            <summary>
            Gets the name of the action performed.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.TeamAllianceEventArgs">
            <summary>
            Provides data for TeamAlliance event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.TeamAllianceEventArgs.Team1">
            <summary>
            Gets the name of 1st team.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.TeamAllianceEventArgs.Team2">
            <summary>
            Gets the name of 2nd team.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.TeamScoreReportEventArgs">
            <summary>
            Provides data for TeamScoreReport event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.TeamScoreReportEventArgs.Team">
            <summary>
            Gets the name of team.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.TeamScoreReportEventArgs.Score">
            <summary>
            Gets the score of team.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.TeamScoreReportEventArgs.PlayerCount">
            <summary>
            Gets the player count.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.TeamScoreReportEventArgs.ExtraInfo">
            <summary>
            Gets the additional data present in the message.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.TeamSelectionEventArgs">
            <summary>
            Provides data for team selection event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.TeamSelectionEventArgs.Team">
            <summary>
            Gets the team name.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.WeaponEventArgs">
            <summary>
            Provides data for WeaponSelect and WeaponAcquired event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.WeaponEventArgs.Weapon">
            <summary>
            Gets name of weapon.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.WorldActionEventArgs">
            <summary>
            Provides data for WorldAction event.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.WorldActionEventArgs.Action">
            <summary>
            Gets the name of the action performed.
            </summary>
        </member>
        <member name="T:ValveQuery.GameServer.LogEvents">
            <summary>
            Provides mechanism to subscribe and filter logged events.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.LogEvents.Filters">
            <summary>
            Represents a collection of filters.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.CvarStartMsg">
            <summary>
            Occurs when Server cvar starts(In TFC, if tfc_clanbattle is 1, this doesn't happen.).
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.ServerCvar">
            <summary>
            Occurs when someone changes a cvar over rcon.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.CvarEndMsg">
            <summary>
            Occurs when Server cvar ends(In TFC, if tfc_clanbattle is 0, this doesn't happen.).
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.LogFileStarted">
            <summary>
            Occurs when Logging to file is started.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.LogFileClosed">
            <summary>
            Occurs when Log file is closed.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.MapLoaded">
            <summary>
            Occurs when map is loaded.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.MapStarted">
            <summary>
            Occurs when Map starts.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.RconMsg">
            <summary>
            Occurs when an rcon message is sent to server.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.ServerName">
            <summary>
            Occurs when server name is displayed.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.ServerSay">
            <summary>
            Occurs when Server says.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerConnected">
            <summary>
            Occurs when a player is connected.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerValidated">
            <summary>
            Occurs when a player is validated.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerEnteredGame">
            <summary>
            Occurs when a player is enters game.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerDisconnected">
            <summary>
            Occurs when a player is disconnected.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerKicked">
            <summary>
            Occurs when a player is kicked.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerSuicided">
            <summary>
            Occurs when a player commit suicide.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerJoinedTeam">
            <summary>
            Occurs when a player Join team.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerChangedRole">
            <summary>
            Occurs when a player change role.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerChangedName">
            <summary>
            Occurs when a player changes name.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerKilled">
            <summary>
            Occurs when a player is killed.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerInjured">
            <summary>
            Occurs when a player is injured.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerOnPLayerTriggered">
            <summary>
            Occurs when a player triggers  something on another player(in TFC this event may cover medic healings and infections, sentry gun destruction, spy uncovering.etc).
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerTriggered">
            <summary>
             Occurs when a player triggers an action.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.TeamTriggered">
            <summary>
             Occurs when a team triggers an action(eg:team winning).
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.WorldTriggered">
            <summary>
             Occurs when server triggers an action(eg:roundstart,game events).
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.Say">
            <summary>
             Occurs when a player says. 
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.TeamSay">
            <summary>
             Occurs when a player uses teamsay.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.TeamAlliance">
            <summary>
             Occurs when a team forms alliance with another team.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.TeamScoreReport">
            <summary>
             Occurs when Team Score Report is displayed at round end.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PrivateChat">
            <summary>
            Occurs when a private message is sent.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerScoreReport">
            <summary>
            Occurs when Player Score Report is displayed at round end.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerSelectedWeapon">
            <summary>
            Occurs when Player selects a weapon.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.PlayerAcquiredWeapon">
            <summary>
            Occurs when Player acquires a weapon.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.Shutdown">
            <summary>
            Occurs when server shuts down.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.Exception">
            <summary>
            Occurs when a log message cannot be parsed.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.LogReceived">
            <summary>
            Occurs when a log message is received.
            </summary>
        </member>
        <member name="E:ValveQuery.GameServer.LogEvents.CommentReceived">
            <summary>
            Occurs when a log comment is received.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes LogEvents.
            </summary>
            <param name="endPoint">server EndPoint.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.ProcessLog(System.String)">
            <summary>
            Processes received log messages.
            </summary>
            <param name="logLine"></param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by this instance.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnCommentReceive(System.DateTime,System.String)">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.CommentReceived" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.CommentReceived" /> event was fired.</param>
            <param name="message">Comment line.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnLogReceive(System.DateTime,System.String)">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.LogReceived" /> event.
            </summary>
            <param name="timestamp">Time at which log message was received.</param>
            <param name="message">Received log line.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnCvarStart(System.DateTime)">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.CvarStartMsg" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.CvarStartMsg" /> event was fired.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnServerCvar(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.ServerCvar" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.ServerCvar" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.ServerCvar" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnCvarEnd(System.DateTime)">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.CvarEndMsg" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.CvarEndMsg" /> event was fired.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnLogFileStart(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.LogFileStarted" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.LogFileStarted" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.LogFileStarted" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnLogFileClose(System.DateTime)">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.LogFileClosed" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.LogFileClosed" /> event was fired.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnMapLoading(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.MapLoaded" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.MapLoaded" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.MapLoaded" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnMapStart(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.MapStarted" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.MapStarted" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.MapStarted" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnRconMsg(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.RconMsg" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.RconMsg" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.RconMsg" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnserverName(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.ServerName" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.ServerName" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.ServerName" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnServerSay(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.ServerSay" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.ServerSay" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.ServerSay" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnConnection(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerConnected" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerConnected" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerConnected" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnValidation(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerValidated" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerValidated" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerValidated" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnEnterGame(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerEnteredGame" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerEnteredGame" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerEnteredGame" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnDisconnection(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerDisconnected" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerDisconnected" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerDisconnected" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnKick(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerKicked" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerKicked" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerKicked" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnSuicide(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerSuicided" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerSuicided" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerSuicided" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnTeamSelection(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerJoinedTeam" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerJoinedTeam" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerJoinedTeam" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnRoleSelection(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerChangedRole" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerChangedRole" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerChangedRole" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnNameChange(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerChangedName" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerChangedName" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerChangedName" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnKill(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerKilled" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerKilled" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerKilled" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnInjure(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerInjured" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerInjured" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerInjured" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnPlayer_PlayerAction(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerOnPLayerTriggered" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerOnPLayerTriggered" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerOnPLayerTriggered" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnPlayerAction(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerTriggered" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerTriggered" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerTriggered" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnTeamAction(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.TeamTriggered" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.TeamTriggered" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.TeamTriggered" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnWorldAction(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.WorldTriggered" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.WorldTriggered" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.WorldTriggered" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnSay(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.Say" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.Say" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.Say" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnTeamSay(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.TeamSay" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.TeamSay" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.TeamSay" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnTeamAlliance(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.TeamAlliance" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.TeamAlliance" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.TeamAlliance" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnTeamScoreReport(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.TeamScoreReport" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.TeamScoreReport" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.TeamScoreReport" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnPrivateChat(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PrivateChat" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PrivateChat" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PrivateChat" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnPlayerScoreReport(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerScoreReport" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerScoreReport" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerScoreReport" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnWeaponSelection(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerSelectedWeapon" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerSelectedWeapon" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerSelectedWeapon" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnWeaponPickup(System.DateTime,System.String[])">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerSelectedWeapon" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerSelectedWeapon" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.PlayerSelectedWeapon" /> event.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnShutdown(System.DateTime)">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.PlayerSelectedWeapon" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.PlayerSelectedWeapon" /> event was fired.</param>
        </member>
        <member name="M:ValveQuery.GameServer.LogEvents.OnException(System.DateTime,System.String)">
            <summary>
            Raises the <see cref="E:ValveQuery.GameServer.LogEvents.Exception" /> event.
            </summary>
            <param name="timestamp">Time at which <see cref="E:ValveQuery.GameServer.LogEvents.Exception" /> event was fired.</param>
            <param name="info">Information about <see cref="E:ValveQuery.GameServer.LogEvents.Exception" /> event.</param>
        </member>
        <member name="T:ValveQuery.GameServer.LogCallback">
            <summary>
            Encapsulates a method that has a parameter of type string which is the log message received from server.
            Invoked when a log message is received from server.
            </summary>
            <param name="log">Received log message.</param>
        </member>
        <member name="T:ValveQuery.GameServer.Logs">
            <summary>
            Provides methods to listen to logs and to set up events on desired type of log message.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.Logs.IsListening">
            <summary>
            Gets a value that indicates whether its listening.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.Logs.Start">
            <summary>
            Start listening to logs.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.Logs.Stop">
            <summary>
            Stop listening to logs.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.Logs.Listen(ValveQuery.GameServer.LogCallback)">
            <summary>
            Listen to logs sent by the server.
            </summary>
            <param name="callback">Called when a log message is received.</param>
        </member>
        <member name="M:ValveQuery.GameServer.Logs.GetEventsInstance">
            <summary>
            Returns an instance of <see cref="T:ValveQuery.GameServer.LogEvents" /> that provides event and filtering mechanism.
            </summary>
            <returns>Instance of <see cref="T:ValveQuery.GameServer.LogEvents" /> </returns>
        </member>
        <member name="M:ValveQuery.GameServer.Logs.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:ValveQuery.GameServer.Rcon">
            <summary>
            Provides methods to access server using rcon password.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.Rcon.Enablelogging">
            <summary>
            Enable logging on server.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.Rcon.Disablelogging">
            <summary>
            Disable logging on server.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.Rcon.SendCommand(System.String,System.Boolean)">
            <summary>
            Send a Command to server.
            </summary>
            <param name="cmd">Server command.</param>
            <param name="isMultiPacketResponse">Whether the reply could be/is larger than 1400 bytes.</param>
            <returns>Reply from server in string format.</returns>
        </member>
        <member name="M:ValveQuery.GameServer.Rcon.AddlogAddress(System.String,System.UInt16)">
            <summary>
            Add a client socket to server's logaddress list.
            </summary>
            <param name="ip">IP-Address of client.</param>
            <param name="port">Port number of client.</param>
        </member>
        <member name="M:ValveQuery.GameServer.Rcon.RemovelogAddress(System.String,System.UInt16)">
            <summary>
            Delete a client socket from server's logaddress list.
            </summary>
            <param name="ip">IP-Address of client.</param>
            <param name="port">Port number of client.</param>
        </member>
        <member name="M:ValveQuery.GameServer.Rcon.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:ValveQuery.GameServer.Server">
            <summary>
            Represents the connected server.Provides methods to query,listen to server logs and control the server.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.Server.EndPoint">
            <summary>
            Server Endpoint.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.Server.Rcon">
            <summary>
            Provides method(s) to perform admin level operations.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.Server.SendTimeout">
            <summary>
            Gets or sets Socket's SendTimeout Property.
            </summary>
        </member>
        <member name="P:ValveQuery.GameServer.Server.ReceiveTimeout">
            <summary>
            Gets or sets Socket's ReceiveTimeout.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.Server.GetInfo(ValveQuery.AttemptCallback)">
            <summary>
            Retrieves information about the server.
            </summary>
            <param name="callback">Called on every attempt made to connect to server(max. attempts = Retries + 1).</param>
            <returns>Instance of ServerInfo.</returns>
        </member>
        <member name="M:ValveQuery.GameServer.Server.GetPlayers(ValveQuery.AttemptCallback)">
            <summary>
            Retrieves information about the players currently on the server.
            </summary>
            <param name="callback">called on every attempt made to connect to server(max. attempts = Retries + 1).</param>
            <returns>Collection of <see cref="T:ValveQuery.GameServer.PlayerInfo" /> instances.</returns>
        </member>
        <member name="M:ValveQuery.GameServer.Server.GetRules(ValveQuery.AttemptCallback)">
            <summary>
            Retrieves server rules.
            </summary>
            <param name="callback">called on every attempt made to connect to server(max. attempts = <see cref="P:ValveQuery.ConnectionInfo.Retries" /> + 1).</param>
            <returns>Collection of <see cref="T:ValveQuery.GameServer.Rule" /> instances.</returns>
        </member>
        <member name="M:ValveQuery.GameServer.Server.GetLogs(System.Int32)">
            <summary>
            Listen to server logs.
            </summary>
            <param name="port">Local port.</param>
            <returns>Instance of <see cref="T:ValveQuery.GameServer.Logs" /> class.</returns>
            <remarks>Receiver's socket address must be added to server's logaddress list before listening.</remarks>
        </member>
        <member name="M:ValveQuery.GameServer.Server.GetControl(System.String,System.Boolean)">
            <summary>
            Gets valid rcon instance that can be used to send rcon commands to server..
            </summary>
            <param name="pass">Rcon password of server.</param>
            <param name="useWebRcon">Use a web based connection?</param>
            <returns>true if server accepted rcon password.</returns>
        </member>
        <member name="M:ValveQuery.GameServer.Server.Ping">
            <summary>
            Gets round-trip delay time.
            </summary>
            <returns>Elapsed milliseconds(-1 if server is not responding).</returns>
        </member>
        <member name="M:ValveQuery.GameServer.Server.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by this instance.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:ValveQuery.GameServer.ServerQuery">
            <summary>
            Provides methods to create Server instance.
            </summary>
        </member>
        <member name="M:ValveQuery.GameServer.ServerQuery.GetServerInstance(System.String,System.UInt16,System.Nullable{System.Boolean},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns an object that represents the server
            </summary>
            <param name="ip">IP-Address of server.</param>
            <param name="port">Port number of server.</param>
            <param name="isObsolete">Obsolete Gold Source servers reply only to half life protocol.if set to true then it would use half life protocol.If set to null,then protocol is identified at runtime[Default : false].</param>
            <param name="sendTimeout">Sets Socket's SendTimeout Property.</param>
            <param name="receiveTimeout">Sets Socket's ReceiveTimeout.</param>
            <param name="retries">Number of times to retry if first attempt fails.</param>
            <param name="throwExceptions">Whether to throw any exceptions.</param>
            <returns>Instance of server class that represents the connected server.</returns>
        </member>
        <member name="M:ValveQuery.GameServer.ServerQuery.GetServerInstance(System.Net.IPEndPoint,System.Nullable{System.Boolean},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns an object that represents the server.
            </summary>
            <param name="endPoint">Socket address of server.</param>
            <param name="isObsolete">Obsolete Gold Source servers reply only to half life protocol.if set to true then it would use half life protocol.If set to null,then protocol is identified at runtime.</param>
            <param name="sendTimeout">Sets Socket's SendTimeout Property.</param>
            <param name="receiveTimeout">Sets Socket's ReceiveTimeout.</param>
            <param name="retries">Number of times to retry if first attempt fails.</param>
            <param name="throwExceptions">Whether to throw any exceptions.</param>
            <returns>Instance of server class that represents the connected server</returns>
        </member>
        <member name="T:ValveQuery.QueryBase">
            <summary>
            Provides clean up code.
            </summary>
        </member>
        <member name="P:ValveQuery.QueryBase.IsDisposed">
            <summary>
            To check whether dispose method was called before.
            </summary>
        </member>
        <member name="M:ValveQuery.QueryBase.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by this instance.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ValveQuery.QueryBase.ThrowIfDisposed">
            <summary>
            Throw <see cref="T:System.ObjectDisposedException" /> if this instance is already disposed.
            </summary>
        </member>
        <member name="M:ValveQuery.QueryBase.Dispose">
            <summary>
            Disposes all the resources used by this instance.
            </summary>
        </member>
        <member name="M:ValveQuery.QueryBase.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="T:ValveQuery.QueryCollection`1">
            <summary>
            Wrapper on ReadOnlyCollection that returns its json representation on calling ToString().
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ValveQuery.QueryCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:ValveQuery.QueryCollection`1.ToString">
            <summary>
            Returns Json string.
            </summary>
            <returns>Json string.</returns>
        </member>
        <member name="T:ValveQuery.AttemptCallback">
            <summary>
            References a method to be called when an attempt to perform some action is made.
            </summary>
            <param name="attempt"></param>
        </member>
        <member name="T:ValveQuery.ErrorCallback">
            <summary>
            References a method to be called when an exception occurs.
            </summary>
            <param name="ex">Thrown exception.</param>
        </member>
    </members>
</doc>
